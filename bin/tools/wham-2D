#!/usr/bin/python2

#######################################################################
##  Dependences                                                      ##
#######################################################################

import os
import sys
import argparse
import numpy as np


#######################################################################
##  CONSTANTS                                                        ##
#######################################################################

inf = 1.e30
kB = 8.31447086363e-3  # in kJ/mol
#kB = 0.00198587724841  # in kcal/mol

name1 = 'dat_x'
name2 = 'dat_y'


#######################################################################
##  MAIN                                                             ##
#######################################################################

def main():
    '''Main WHAM-2D program'''


    ##  PARSER  #######################################################

    my_parser = argparse.ArgumentParser(prog='wham-2D',
                                        description='WHAM integration of PMF calculations (2D)')
    my_parser.add_argument('--name',
                        type=str,
                        help='PMF name',
                        default='pmf')
    my_parser.add_argument('--path',
                        type=str,
                        help='dat_* files path',
                        default='../')
    my_parser.add_argument('--temp',
                        type=float,
                        help='temperature (def: 313.)',
                        default=313.)
    my_parser.add_argument('--conv',
                        type=float,
                        help='wham convergence (def: 0.001)',
                        default=0.001)
    my_parser.add_argument('--ij',
                        metavar=('i','j'),
                        required=True,
                        type=int,
                        help='i j',
                        nargs=2)
    my_parser.add_argument('--time',
                        required=True,
                        type=int,
                        help='production time (ps)')
    # execute parser                    
    args = my_parser.parse_args()

    # assignation of input variables
    outname      = args.name
    directory    = args.path
    temperature  = args.temp
    wham_conv    = args.conv
    i_val        = args.ij[0]
    j_val        = args.ij[1]

    equilibration  = 1
    acquisition    = args.time*1000 + 1


    ##  INPUT  ########################################################

    # get 'dat_*' file lists
    files = os.listdir(directory)
    coor1 = [ i for i in files if name1 in i ]
    coor2 = [ i for i in files if name2 in i ]
    coor1.sort()
    coor2.sort()

    # read 'dat_*' files
    windows = []
    for files in zip(coor1, coor2):
        rc0 = []
        fc = []
        rc = []
        for fn in files:
            sys.stdout.write(fn+' ')
            data = open(os.path.join(directory, fn)).readlines()
            # read ForceConstant and ReactionCoordinate0
            fcs, rc0s = data[0].split()
            fc.append( fcs )
            rc0.append( rc0s )
            # read coordinates
            rc.append(data[equilibration:equilibration+acquisition])
            sys.stdout.write(str(len(rc[-1]))+'\n')
        # windows structure:  [ [ [rc0,rc0], [fc,fc], [[c,c],[c,c],...] ], ... ]
        windows.append([np.array(rc0, dtype=float),
                        np.array(fc, dtype=float) * 0.5,
                        np.transpose(np.array(rc, dtype=float))])

    # get minimums and maximums
    _get_limits(windows)

    # print information
    sys.stdout.write("\n# No Windows: {:d}\n".format(len(windows)))
    sys.stdout.write('# x_min: {:>7.3f}    x_max: {:>7.3f} \n'
                     '# y_min: {:>7.3f}    y_max: {:>7.3f} \n\n'.format(min1,max1,min2,max2))

    sys.stdout.flush()

    # combine (useless?)
    windows = combine(windows)


    ##  WHAM  #########################################################
    c1_bins = (min1, max1, (i_val+1)*2)
    c2_bins = (min2, max2, (j_val+1)*2)
    axes, rho, pmf = wham(windows, (c1_bins, c2_bins), temperature, wham_conv)

    ##  POST PROCESS  #################################################
    big = np.equal(pmf, inf)
    pmf_min = np.minimum.reduce(np.ravel(pmf))
    pmf_out = np.choose(big, (pmf-pmf_min, 0))
    pmf_max = np.maximum.reduce(np.ravel(pmf))


    ##  OUTPUT  #######################################################
    # Write classic output
    writeArray(pmf_out, 'all_' + outname + '.dat')
    writeArray(axes[0], 'axes0_' + outname + '.dat')
    writeArray(axes[1], 'axes1_' + outname + '.dat')

    # Write gnuplot output
    with open(outname + '-AM1.dat', "wt") as f:
        for i in xrange((i_val+1)*2):
            for j in xrange((j_val+1)*2):
                f.write("%s\t%s\t%s\n" % (axes[0][i], axes[1][j], pmf_out[i][j]))
            f.write("\n")


#######################################################################
##  FUNCTIONS                                                        ##
#######################################################################

def _get_limits(windows_list):
    '''Determine minimum and maximum of x and y'''
    global min1, min2, max1, max2
    points_x, points_y = [], []
    for rc, fc, data in windows_list:
        points_x.extend([point[0] for point in data])
        points_y.extend([point[1] for point in data])
    min1 = min(points_x)
    min2 = min(points_y)
    max1 = max(points_x)
    max2 = max(points_y)

def combine(window_list):
    '''??? Useless ???'''
    new = []
    for w in window_list:
        done = False
        for i in range(len(new)):
            if np.logical_and.reduce(np.equal(new[i][0], w[0])) and \
                np.logical_and.reduce(np.equal(new[i][1], w[1])):
                new[i] = (new[i][0], new[i][1],
                            np.concatenate((new[i][2], w[2])))
                done = True
                break
        if not done:
            new.append(w)
    return new

def writeArray( array, filename ):
    fd = open( filename, "wt" )
    if len(array.shape) == 1:
        array = array[:, np.newaxis]
    for line in array:
        for element in line:
            fd.write(`element` + ' ')
        fd.write('\n')
    fd.close()

class _index_expression_class:
    try: maxint = sys.maxint
    except: maxint = sys.maxsize
    def __getitem__(self, item):
        if type(item) != type(()):
            return (item,)
        else:
            return item
    def __len__(self):
        return self.maxint
    def __getslice__(self, start, stop):
        if stop == self.maxint:
            stop = None
        return self[start:stop:None]

##  WHAM  #############################################################
def wham(data, bins, t, conv_limit = 0.001):
    '''WHAM algorithm'''
    
    # initialization
    beta = 1./(kB*t)
    dim = len(bins)
    nwin = len(data)
    axes = map(binAxis, bins)

    # build histogram and potential
    hist = np.array([histogram(rc, bins) for rc0, fc, rc in data])
    pot = np.array([biasPotential(rc0, fc, axes) for rc0, fc, rc in data])
    # hist = np.array(hist)
    # pot = np.array(pot)

    npoints = integrate(hist)
    index = _index_expression_class()[::] + dim*_index_expression_class()[np.newaxis]
    f = np.zeros(nwin, np.float)
    lastf = f
    num = 1.*np.add.reduce(hist, 0)

    # main wham loop    
    while 1:
        #	den = np.add.reduce(npoints[index] * np.exp(beta*(f[index]-pot)))
        expnt = beta * ( f[index] - pot )
        OK    = np.greater ( expnt, -200. )
        den   = np.add.reduce ( npoints[index] * np.exp ( np.where ( OK, expnt, -200. ) ) )
        good  = np.not_equal(den, 0.)
        rho   = num/den
        rho   = np.where(good, rho, 0.)
        expnt = - beta * pot
        OK    = np.greater ( expnt, -200. )
        f     = - np.log ( integrate ( rho * np.exp ( np.where ( OK, expnt, -200. ) ) ) ) / beta
        convergence = np.maximum.reduce(np.fabs(f-lastf))
        sys.stdout.write("{}\n".format(convergence))
        if convergence < conv_limit: break
        lastf = f
    
    # post-process
    mask = np.equal(rho, 0.)
    pmf = -np.log(rho+mask)/beta + inf*mask
    pmf_min = np.minimum.reduce(np.ravel(pmf))
    pmf = pmf - pmf_min
    
    return axes, rho, pmf

def binAxis(bin_spec):
    min, max, n = bin_spec
    w = (max-min)/(n-1)
    return min + w*np.arange(0.,n)

def histogram(data, bins):
    dim = data.shape[1]
    if dim != len(bins):
        raise ValueError('Inconsistent data')
    min = np.array(map(lambda b: b[0], bins))
    max = np.array(map(lambda b: b[1], bins))
    n = np.array(map(lambda b: b[2], bins))
    w = (max-min)/(n-1)
    indices = ((data-min+w/2)/w).astype(np.int)
    h = apply(np.zeros, (tuple(n), np.int))
    for i in range(data.shape[0]):
        ind = indices[i]
        if np.logical_and.reduce(np.logical_and( np.greater_equal(ind, 0), np.less(ind, n))):
            ind = tuple(ind)
            h[ind] = h[ind] + 1
    return h

def biasPotential(rc0, fc, axes):
    dim = rc0.shape[0]
    p = np.array(0.)
    for i in range(dim):
        p = np.add.outer(p, fc[i]*(axes[i]-rc0[i])**2)
    return p

def integrate(a):
    while len(a.shape) > 1:
        a = np.add.reduce(a, -1)
    return a


##  MAIN EXECUTION  ###################################################
if __name__ == '__main__': main()
