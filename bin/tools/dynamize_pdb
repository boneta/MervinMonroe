#!/usr/bin/env python2

import sys, os, fileinput
import ecmb
import argparse

## pdb file preparer
# from GROMACS and AMBER ff

# Parser
my_parser = argparse.ArgumentParser(prog='dynamize_pdb',
                                    description=' Prepare a pdb file for Dynamo\n (tested for pdb from GROMACS)\n\n'+
                                                ' Generates a formatted pdb, crd, seq and atom list for ligands',
                                    formatter_class=argparse.RawTextHelpFormatter)
my_parser.add_argument('i',
                       type=str,
                       help='pdb file (i.e.: input.pdb)')
my_parser.add_argument('-o',
                       metavar='output',
                       type=str,
                       help='basename for output files (i.e. def: input_dyn)')
args = my_parser.parse_args()

## AminoAcids list
# 20 standard
aa = ['ALA', 'ARG', 'ASN', 'ASP', 'CYS', 'GLN', 'GLU', 'GLY', 'HIS', 'ILE', 'LEU', 'LYS', 'MET', 'PHE', 'PRO', 'SER', 'THR', 'TRP', 'TYR', 'VAL']
aa.extend(['HID', 'HIE', 'HIP']) # Histidine states
aa.append('CYX') # Bonded cysteine
# aa.append('SEC') # Selenocysteine
ions = ['CL', 'NA']

## Ligands
ligands = []
ligand_n = 0
chain_letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']

## Hydrogen replacements
hreplace = [ ['1HH1','HH11'], ['2HH1','HH12'], ['1HH2','HH21'], ['2HH2','HH22'],                                       # HH
             ['1HD1','HD11'], ['2HD1','HD12'], ['3HD1','HD13'], ['1HD2','HD21'], ['2HD2','HD22'], ['3HD2','HD23'],     # HD
             ['1HE2','HE21'], ['2HE2','HE22'],                                                                         # HE
             ['1HG1','HG11'], ['2HG1','HG12'], ['3HG1','HG13'], ['1HG2','HG21'], ['2HG2','HG22'], ['3HG2','HG23'] ]    # HG

## Names of files
infile = args.i
basein = os.path.splitext(infile)[0]
if args.o is not None:
    baseout = args.o
else:
    baseout = basein + "_dyn"

outpdb = baseout + ".pdb"
outcrd = baseout + ".crd"
outseq = baseout + ".seq"

## LEGACY:
# check if pdb4amber is available and execute
# pdb4amber > /dev/null 2>&1
# if [ "$?" == 0 ]; then
#   pdb4amber -i $infile -o $outfile
#   rm -f ${outfile%.*}_nonprot.pdb
#   rm -f ${outfile%.*}_renum.txt
#   rm -f ${outfile%.*}_sslink

##  PDB  ##############################################################

sys.stderr.write(outpdb + "  -")

# open and read input pdb
with open(infile, 'r') as inp:
    ipdb = inp.readlines()
    ipdb = map(str.strip, ipdb)

## All HETATM to ATOM
ipdb = [line.replace('HETATM','ATOM ') for line in ipdb]

# Get first residue type number
for line in ipdb:
    if line.split()[0] == 'ATOM' and line.split()[3] in aa:
        try: res0 = int(line.split()[5]) - 1
        except: res0 = int(line.split()[4]) - 1
        break
for line in ipdb:
    if line.split()[0] == 'ATOM' and line.split()[3] in ions:
        try: ion0 = int(line.split()[4]) - 1
        except: ion0 = int(line.split()[5]) - 1
        break
for line in ipdb:
    if line.split()[0] == 'ATOM' and line.split()[3] == 'SOL':
        try: sol0 = int(line.split()[4]) - 1
        except: sol0 = int(line.split()[5]) - 1
        break

opdb = []
n_tot = 1
# Edit PDB
for line in ipdb:
    ## Skip if not an ATOM
    if line.split()[0] != 'ATOM': continue

    ## Correct wrong hydrogen names
    for i in range(len(hreplace)):
        line = line.replace( hreplace[i][0], hreplace[i][1] )

    ## Convert string line to list
    line = line.split()

    ## Quit chain letter
    try: float(line[4])
    except: del line[4]

    ## Renumerate atom
    del line[1]
    line.insert(1, n_tot)
    n_tot += 1

    ## Quit ocupations / b-fac / atom
    del line[8:]

    ## Add ocupations / b-fac
    line.extend([0, 0])

    ## Add chain letter and renumerate residue
    while True:
        if line[3] in aa:
            line.append(chain_letters[0])
            line[4] = int(line[4]) - res0
            break
        elif line[3] in ions:
            line.append(line[3])
            line[4] = int(line[4]) - ion0
            break
        elif line[3] == 'SOL':
            line.append('BOX')
            line[4] = int(line[4]) - sol0
            break
        elif line[3] in ligands:
            line.append(chain_letters[ligand_n])
            line[4] = int(line[4]) - lig0
            break
        else:
            ligands.append(line[3])
            ligand_n += 1
            lig0 = int(line[4]) - 1

    # format line
    pline = "{:4s} {:>6d} {:^4s} {:>3s} {:>5d}     {:>7s} {:>7s} {:>7s}  {:>3.2f}  {:>3.2f}  {:>5s}".format(*line)
    opdb.append(pline)

## Change CYS for CYX if bonded (no 'HG' atom --> 10 atoms)
cys_index = [i for i, x in enumerate(opdb) if "N  CYS" in x]  # Its assumed to be N the first atom in the residue
for i in cys_index:
    if int(opdb[i].split()[4]) != int(opdb[i+10].split()[4]):
        for j in range(10): opdb[i+j] = opdb[i+j].replace('CYS','CYX')

## Change HIS for HID/HIE/HIP
his_index = [i for i, x in enumerate(opdb) if "N  HIS" in x]  # Its assumed to be N the first atom in the residue
for i in his_index:
    if int(opdb[i].split()[4]) == int(opdb[i+17].split()[4]):  # check for HIP (18 atoms instead of 17)
        for j in range(17): opdb[i+j] = opdb[i+j].replace('HIS','HIP')
    elif str(opdb[i+9].split()[2]) == 'HD1':  # check for HID
        for j in range(16): opdb[i+j] = opdb[i+j].replace('HIS','HID')
    elif str(opdb[i+9].split()[2]) == 'CE1':  # check for HIE
        for j in range(16): opdb[i+j] = opdb[i+j].replace('HIS','HIE')
    else:
        sys.stderr.write("  CAUTION: ISSUES WITH HIS  -")
## Write output file
with open(outpdb, 'w') as outp:
    for line in opdb:
        outp.write(line + "\n")
    outp.write("END\n")

sys.stderr.write("  DONE\n")


##  LIGAND ATOMS  #####################################################

sys.stderr.write("Ligand Atom List  -")

if not ligands :
    sys.stderr.write("  NO LIGAND FOUND\n")
else:
    for lig in ligands:
        with open("ligand_"+lig, 'w') as ligout:
            lig_index = [i for i, x in enumerate(opdb) if lig in x]
            ligout.write("""
!-------------------------------------------------------------------------------
Residue {}
!-------------------------------------------------------------------------------
! # Atoms, bonds and impropers.
 {}   0   0\n""".format(lig, len(lig_index)))
            for i in lig_index:
                ligout.write("{:<4s}  {:<3s}   0.0\n".format(opdb[i].split()[2], list(opdb[i].split()[2])[0]))

    sys.stderr.write("  DONE\n")



##  CRD  ##############################################################

sys.stderr.write(outcrd + "  -")

# Create crd file
m=ecmb.Molec()
m.load_pdb( outpdb )
m.guess_z()
m.save_crd( outcrd )
m=None

# Edit wrong CL mass
for line in fileinput.input(outcrd, inplace=True):
    sys.stdout.write( line.replace("CL            6","CL           17") )

sys.stderr.write("  DONE\n")


##  SEQ  ##############################################################

sys.stderr.write(outseq + "  -")

m=ecmb.Molec()
m.load_pdb( outpdb )
m.guess_z()
m.info_seq( outseq )

# Edit terminal variants
with open(outseq, 'r') as inp:
    iseq = inp.readlines()
    iseq = map(str.strip, iseq)

# Delete old seq file
os.remove( outseq )

## Include terminal variants
subsysa_index = iseq.index("Subsystem A")
resn = int(iseq[subsysa_index + 1])
reslines = resn // 13 + (resn % 13 > 0)

iseq.insert(subsysa_index+reslines+2, "VARIANT          N_TERMINAL  "+iseq[subsysa_index+2].split(" ;")[0]+"  1")
iseq.insert(subsysa_index+reslines+3, "VARIANT          C_TERMINAL "+iseq[subsysa_index+reslines+1].split(" ;")[-2]+"  "+str(resn))

## Include disulphide bridges variants
ss_bond_thr = 4.0  # maximum distance to consider S-S bond (A)
# get residue number and SG coordinates
sg = []
for i in [i for i, x in enumerate(opdb) if "SG  CYX" in x]:
    sg.append([int(opdb[i].split()[4]), float(opdb[i].split()[5]), float(opdb[i].split()[6]), float(opdb[i].split()[7])])

# evaluate disntaces, consider bond if below threshold
ss_bond = []
for i in range(len(sg)):
    for j in range(i+1, len(sg)):
        dist = ( (sg[i][1]-sg[j][1])**2 + (sg[i][2]-sg[j][2])**2 + (sg[i][3]-sg[j][3])**2 )**(0.5)
        if dist < ss_bond_thr:
            ss_bond.append([sg[i][0],sg[j][0]])

# check number of bonds
if len(ss_bond) != len(sg)/2: sys.stderr.write("  CAUTION: ISSUES WITH SS BONDS  -")

# include ss bonds variants
for i in range(len(ss_bond)):
    iseq.insert(-1, "Link DISULPHIDE_BRIDGE A CYX {:3d} A CYX {:3d}".format(*ss_bond[i]))

# write new seq
with open(outseq, 'w') as outp:
    for line in iseq:
        outp.write(line + "\n")

sys.stderr.write("  DONE\n")
