#!/usr/bin/env python2
# encoding: utf-8

import sys
import os
import numpy as np
# import scipy as sp

infile = sys.argv[1]
outfile = os.path.splitext(infile)[0] + '-trimed' + os.path.splitext(infile)[1]

print "-- PMF trimer --"
print ""
x_min = float(input("x min: "))
x_max = float(input("x max: "))
y_min = float(input("y min: "))
y_max = float(input("y max: "))

print """
{:>8.2f} ·································
         ·································
         ·································
         ·································
         ·································
         ·································
         ·································
{:>8.2f} ·································
    {:>8.2f}                       {:>8.2f}
""".format(y_max, y_min, x_min, x_max)

verify = raw_input("Correct? (y/n): ")
if verify.lower() != "y" and verify.lower() != "yes" :
    print "Exiting"
    exit(1)


data = np.loadtxt(infile, usecols=[0,1,2])

# delete rows out of the range
i=0
while i < data.shape[0] :
    if ((data[i,0] < x_min) or (data[i,0] > x_max) or
        (data[i,1] < y_min) or (data[i,1] > y_max)) :
        data = np.delete(data, i, axis=0)
        continue
    i+=1

# # add blanks
# i=0
# while i < data.shape[0] :
#     if data[i,0] != data[i+1,0] :
#         np.insert(data,i,np.empty([3]),0)
#         i+=1
#     else :
#         i+=1
np.savetxt(outfile, data, fmt='%20.10lf', delimiter=' ')


# # delete repeated bonds
# for i in range(len(atom1_in)) :
#     j = i + 1
#     while j < len(atom1_in) :
#         if ((atom1_in[i] == atom1_in[j] and atom2_in[i] == atom2_in[j]) or
#             (atom1_in[i] == atom2_in[j] and atom2_in[i] == atom1_in[j])) :
#             atom1_in.pop(j)
#             atom2_in.pop(j)
#             continue
#         j = j + 1
#
# # read reference bonds
# atom1_ref, atom2_ref = [], []
# param_r = []
# param_k = []
# for line in reference_bonds :
#     atom1_ref.append(line.split()[7])
#     atom2_ref.append(line.split()[8])
#     param_r.append(line.split()[4])
#     param_k.append(line.split()[5])
#
# # search for parameters (keep the first found)
# for i in range(len(atom1_in)) :
#     for j in range(len(atom1_ref)) :
#         if (( atom1_in[i] == atom1_ref[j] and atom2_in[i] == atom2_ref[j] ) or
#              (atom1_in[i] == atom2_ref[j] and atom2_in[i] == atom1_ref[j])) :
#             print ( "%-4s %-4s %5.1f  %5.3f" % (atom1_in[i], atom2_in[i], float(param_k[j])/1000, float(param_r[j])*10 ))
#             break
#         if j+1 == len(atom1_ref) :
#             print ( "%-4s %-4s %5.1f  %5.3f  %50s" % (atom1_in[i], atom2_in[i], 0.0, 0.0, "! Caution. Parameters not found." ))
#
# print ""
