
  ! MULTIPLE DISTANCE
  r2 = MERVIN_D0_dp MERVIN_STEP_dp * real( j, kind=dp )
  call constraint_point_define( atom_selection( atom_number = (/ MERVIN_A1 /) ) )
  call constraint_point_define( atom_selection( atom_number = (/ MERVIN_A2 /) ) )
  call constraint_point_define( atom_selection( atom_number = (/ MERVIN_A3 /) ) )
  call constraint_point_define( atom_selection( atom_number = (/ MERVIN_A4 /) ) )
  call constraint_define( type = "MULTIPLE_DISTANCE", &
                          fc = MERVIN_FC._dp, &
                          eq = r2, &
                          weights = MERVIN_WEIGHT, &
                          file = 'dat_y.' // trim( si ) // '.' // trim( sj ))

  ! Calculate gradient
  call gradient

  do g = 1, 1000
    if( grms < 40._dp ) cycle
    atmcrd = atmcrd - atmder / dsqrt( sum( atmder ** 2 ) ) * 0.01_dp
    call gradient
  end do

  call random_initialize( i + my_random() )
  call velocity_assign( MERVIN_TEMPERATURE_dp, .false. )

  ! equilibration options
  call dynamics_options( &
    time_step       = 0.001_dp, &     ! 1fs
    print_frequency = 100, &
    steps           = MERVIN_EQUILIBRATION_STEPS )

  call langevin_verlet_dynamics( MERVIN_TEMPERATURE_dp, 100._dp )

  ! production options
  call dynamics_options( &
    time_step       = 0.001_dp, &     ! 1fs
    print_frequency = 100, &
    save_frequency  = 100, &
    coordinate_file = "trj." // trim( si ) // "." // trim( sj ) // ".dcd", &     ! trajectory
    steps           = MERVIN_PRODUCTION_STEPS )

  call constraint_writing_start

  ! production run
  call langevin_verlet_dynamics( MERVIN_TEMPERATURE_dp, 100._dp )

  call constraint_writing_stop
  ! write final coordinates and velocities
  call coordinates_write ( "pmf." // trim( si ) // "." // trim( sj ) // ".crd" )
  call velocity_write ( "pmf." // trim( si ) // "." // trim( sj ) // ".vel" )

  deallocate( flg )

  call dynamo_footer

end
include 'nofix.f90'
